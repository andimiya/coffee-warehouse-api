swagger: "2.0"
info:
 version: "1.0.0"
 title: "Coffee Warehouse API"
 description: "A Design for a Coffee Warehouse API"
 termsOfService: "none"
 contact:
   name: "Andrea Takamiya"
   email: "takamiya.andrea@gmail.com"
  #  url: "devleague.com"
 # license:
 #   name: "MIT"
 #   url: "http://opensource.org/licenses/MIT"
host: "localhost:8080"
schemes:
 - "https"
consumes:
 - "application/json"
produces:
 - "application/text"
paths:
 "/coffee":
   get:
     tags:
       - "Coffee"
     description: "Gets all the coffees in the warehouse"
     operationId: "getAllCoffee"
     produces:
       - "application/json"
     responses:
       200:
         description: "Successful Response"
         schema:
             $ref: '#/definitions/CoffeeItem'
       500:
         description: Server Error

 "/coffee/{id}":
   get:
     tags:
       - "Coffee"
     description: "Gets coffee by ID"
     operationId: "getCoffeeId"
     produces:
       - "application/json"
     parameters:
       -
         name: "id"
         in: "query"
         description: "Coffee by ID"
         required: false
         type: "number"
     responses:
       200:
         description: "Successful Response"
         schema:
           $ref: '#/definitions/CoffeeItem'
       500:
        description: Server Error
 "/coffee/{name}":
   get:
     tags:
       - "Coffee"
     description: "query will need to get coffee by name"
     operationId: "getCoffeeName"
     produces:
       - "application/json"
     parameters:
       -
         name: "name"
         in: "query"
         description: "Coffee by Name"
         required: false
         type: "string"
     responses:
       200:
         description: "Successful Response"
         schema:
           $ref: '#/definitions/CoffeeItem'
       500:
        description: Server Error
 "/coffee/{location}":
  get:
    tags:
      - "Coffee"
    description: "query will need to get coffee by location"
    operationId: "getCoffeeLocation"
    produces:
      - "application/json"
    parameters:
      -
        name: "location"
        in: "query"
        description: "Coffee by Location"
        required: false
        type: "string"
    responses:
      200:
        description: "Successful Response"
        schema:
          $ref: '#/definitions/CoffeeItem'
      500:
       description: Server Error
 "/coffee/{caffieneUnder}":
  get:
    tags:
      - "Coffee"
    description: "Find coffees with a caffeine level below X"
    operationId: "getCaffeieneUnder"
    produces:
      - "application/json"
    parameters:
      -
        name: "caffieneUnder"
        in: "query"
        description: "Coffee by with a caffeiene level below X"
        required: false
        type: "number"
    responses:
      200:
        description: "Successful Response"
        schema:
          $ref: '#/definitions/CoffeeItem'
      500:
       description: Server Error
 "/coffee/{caffieneOver}":
  get:
    tags:
      - "Coffee"
    description: "Find coffees with a caffeine level above X"
    operationId: "getCaffeieneOver"
    produces:
      - "application/json"
    parameters:
      -
        name: "lowCaffeiene"
        in: "query"
        description: "Find coffees with a caffeine level above X"
        required: false
        type: "number"
    responses:
      200:
        description: "Successful Response"
        schema:
          $ref: '#/definitions/CoffeeResponse'
      500:
       description: Server Error
 "/coffee/{newCoffee}":
  post:
    tags:
      - Coffee
    description: Add a new coffee to the warehouse
    operationId: postCoffee
    produces:
      - "application/json"
    parameters:
      -
        in: body
        name: body
        description: Allow authorized users to post new coffees to the warehouse
        required: true
        schema:
          $ref: '#/definitions/CoffeeItem'
    responses:
      200:
        description: Successful Response
        schema:
          $ref: '#/definitions/SuccessResponse'
      500:
        description: Server Error
        schema:
          $ref: '#/definitions/ErrorResponse'
      default:
        description: Server Error
        schema:
          $ref: '#/definitions/ErrorResponse'
 /coffee/{updateCoffee}:
  put:
    tags:
      - Coffee
    description: Edit coffee information
    operationId: updateCoffee
    produces:
      - application/json
    parameters:
      - in: body
        name: body
        description: Coffee Item
        required: true
        schema:
          $ref: '#/definitions/CoffeeItemUpdateRequest'
    responses:
      200:
        description: Successful Response
        schema:
          $ref: '#/definitions/SuccessResponse'
      404:
        description: Not Found
      500:
        description: Server Error
        schema:
          $ref: '#/definitions/ErrorResponse'
      default:
        description: Server Error
        schema:
          $ref: '#/definitions/ErrorResponse'
 "/coffee/{deleteCoffee}":
  delete:
    tags:
      - "Coffee"
    description: "Remove a coffee from the warehouse"
    operationId: "deleteCoffee"
    produces:
      - "text"
    parameters:
      - name: id
        in: path
        description: Allow authorized users to remove coffees from the warehouse
        required: true
        type: number
    responses:
      200:
        description: Successfully Deleted
      404:
        description: Not Found
      500:
        description: Server Error
        schema:
          $ref: '#/definitions/ErrorResponse'
      default:
        description: Server Error
        schema:
          $ref: '#/definitions/ErrorResponse'
 "/orders":
   get:
     tags:
       - "Orders"
     description: "gets all the orders"
     operationId: "getAllOrders"
     produces:
       - "text"
     responses:
       200:
         description: "aqi response"
       default:
         description: "unexpected error"
 "/orders/{id}":
  get:
    tags:
      - "Orders"
    description: "List an order based by its ID"
    operationId: "getOrder"
    produces:
      - "text"
    parameters:
      -
        name: "id"
        in: "query"
        description: "List an order based by its ID"
        required: false
        type: "string"
    responses:
      200:
        description: "aqi response"
      default:
        description: "unexpected error"
 "/orders/{name}":
  get:
    tags:
      - "Orders"
    description: "List an order based by its ID"
    operationId: "getOrder"
    produces:
      - "text"
    parameters:
      -
        name: "name"
        in: "query"
        description: "List an order based by its ID"
        required: false
        type: "string"
    responses:
      200:
        description: "aqi response"
      default:
        description: "unexpected error"
securityDefinitions:
  internalApiKey:
    type: apiKey
    in: header
    name: X-Mashape-Key
definitions:
  CoffeeResponse:
    type: object
    properties:
      schedule:
        type: array
        items:
          $ref: '#/definitions/CoffeeItem'
  CoffeeItem:
    type: object
    properties:
      name:
        type: string
      location:
        type: string
      caffeieneLevel:
        type: number
  Order:
    type: object
    properties:
      orderStatus:
        type: string
  OrderUpdateRequest:
    type: object
    properties:
      orderStatus:
        type: string
  OrderResponse:
    type: object
    properties:
      schedule:
        type: array
        items:
          $ref: '#/definitions/Order'
  CoffeeItemUpdateRequest:
    type: object
    properties:
      name:
        type: string
      location:
        type: string
      caffeieneLevel:
        type: number
  SuccessResponse:
      title: Success
      type: object
      items:
        title: Message
        type: object
      properties:
        message:
          type: string
  ErrorResponse:
    title: Error
    type: object
    items:
      title: Message
      type: object
    properties:
      message:
        type: string
